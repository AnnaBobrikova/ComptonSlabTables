import numpy as np
from astropy.io import fits
from numpy import ones, zeros
from scipy import interpolate

t__e = np.arange(40.0, 202.0, 4.0) #actual range is 40-200 imaginaty units, ~20-100 keV (Te(keV)*1000/511keV is here)
t__bb = np.arange(0.001, 0.0031, 0.0002) #now with reasonable values! This is Tbb(keV)/511keV, so these correspond to 0.07 - 1.5 keV, but our calculations don't work correctly for Tbb<<0.5 keV
tau__t = np.arange(0.5, 3.55, 0.1) 

NEnergy = 150
NZenith = 9

x_l = -3.7
x_u = 0.3

NDataRows = NEnergy*NZenith*len(t__e)*len(t__bb)*len(tau__t)

Data_mighty = zeros([(NDataRows//15), 7]) #DELETE //15 if you want to get the whole dataset, or change the number if you want to reduce the dataset with some other random number

I_mighty = ones((len(t__e), len(t__bb), len(tau__t), NEnergy, NZenith)) #5D Intensity tensor[Te,Tbb,tau_t, Energy, Mu]
Q_mighty = ones((len(t__e), len(t__bb), len(tau__t), NEnergy, NZenith)) #5D Q-parameter tensor[Te,Tbb,tau_t, Energy, Mu]
IntEnergy = np.logspace(x_l,x_u,NEnergy)
Mu = np.array([0.0159199, 0.0819844, 0.193314, 0.337873, 0.5, 0.662127, 0.806686, 0.918016, 0.98408])

#DON'T BOTHER, this next part just reads the tables, our data exporter is below.
p=0 #as we will not go over lenght_Te but just over values within t__e array, we'll need a counter for index corr. to Te
for i in t__e:
    hdu = fits.open('CompSlab_%s.fits' %(i), mode='update')
    print('With CompSlab_%s.fits still works' %(i)) #just to see sth on the screen while the files are being opened
    for ii in range(0,len(t__bb)): #Tbb
        for iii in range(0,len(tau__t)): #that's tau_t
            science_data = hdu[(iii)*len(t__bb)+ii+1].data #this messy index leads to the correct "list" within FITS file
            data = np.transpose(science_data.field(1)) #we need to transpose them, because tables were generated by julia and read in python, and there languages have different "majoring" in rows or columns, afaik
            data2 = np.transpose(science_data.field(0))
            for kk in range(0, NEnergy): #energy
                for kkk in range(0,NZenith): #zenith angles
                    #Data_mighty[]
                    I_mighty[p, ii, iii, kk, kkk] = data[kk, kkk]#no +1 anymore
                    Q_mighty[p, ii, iii, kk, kkk] = data2[kk, kkk]
    p +=1

#and here is the data exporter
p = 0
for i in range(0,len(t__e)):
    for ii in range(0,len(t__bb)):
        for iii in range(0,len(tau__t)):
            for kk in range(0,NEnergy):
                for kkk in range(0,len(Mu)):
                    if (p % 15)==0: #DELETE this if-line completely if you want the whole dataset
                        a = p // 15 #and just keep a = p, I know it's a dumb move, but it's just easier
                        Data_mighty[a, 0] = t__e[i]
                        Data_mighty[a, 1] = t__bb[ii]
                        Data_mighty[a, 2] = tau__t[iii]
                        Data_mighty[a, 3] = IntEnergy[kk]
                        Data_mighty[a, 4] = Mu[kkk]
                        Data_mighty[a, 5] = I_mighty[i,ii,iii,kk,kkk]
                        Data_mighty[a, 6] = Q_mighty[i,ii,iii,kk,kkk]
                    #print(p)
                    #print(i,ii,iii,kk,kkk)
                    p=p+1

import pandas as pd

df = pd.DataFrame(Data_mighty)

df.to_csv('data_AMP_PCS_reduced.csv', index=False)  #If you want, choose another output format here
